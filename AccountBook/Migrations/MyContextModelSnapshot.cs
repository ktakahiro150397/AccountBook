// <auto-generated />
using System;
using AccountBook.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AccountBook.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AccountBook.Models.AttachmentFile", b =>
                {
                    b.Property<int>("AttachmentFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("AttachFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AttachFileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.HasKey("AttachmentFileId");

                    b.HasIndex("PaymentHeaderId");

                    b.ToTable("attachmentFiles");
                });

            modelBuilder.Entity("AccountBook.Models.CategoryMaster", b =>
                {
                    b.Property<int>("CategoryMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTypeMasterId")
                        .HasColumnType("int");

                    b.HasKey("CategoryMasterId");

                    b.HasIndex("PaymentTypeMasterId");

                    b.ToTable("categoryMasters");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CategoryMasterId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MoneyAmount")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxTypeTaxMasterId")
                        .HasColumnType("int");

                    b.Property<int>("UnitCount")
                        .HasColumnType("int");

                    b.Property<long>("UnitPrice")
                        .HasColumnType("bigint");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("CategoryMasterId");

                    b.HasIndex("PaymentHeaderId");

                    b.HasIndex("PaymentTypeMasterId");

                    b.HasIndex("TaxTypeTaxMasterId");

                    b.ToTable("paymentDetails");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentHeader", b =>
                {
                    b.Property<int>("PaymentHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ActuialPaymentMonth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MoneyAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentMonth")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentHeaderId");

                    b.HasIndex("UserId");

                    b.ToTable("paymentHeaders");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentTypeMaster", b =>
                {
                    b.Property<int>("PaymentTypeMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("IsCategoryChangable")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeMasterId");

                    b.ToTable("paymentTypeMasters");
                });

            modelBuilder.Entity("AccountBook.Models.TaxMaster", b =>
                {
                    b.Property<int>("TaxMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxRate")
                        .HasColumnType("int");

                    b.HasKey("TaxMasterId");

                    b.ToTable("taxMasters");
                });

            modelBuilder.Entity("AccountBook.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("AccountBook.Models.AttachmentFile", b =>
                {
                    b.HasOne("AccountBook.Models.PaymentHeader", null)
                        .WithMany("AttachFile")
                        .HasForeignKey("PaymentHeaderId");
                });

            modelBuilder.Entity("AccountBook.Models.CategoryMaster", b =>
                {
                    b.HasOne("AccountBook.Models.PaymentTypeMaster", "PaymentTypeMaster")
                        .WithMany("Category")
                        .HasForeignKey("PaymentTypeMasterId");

                    b.Navigation("PaymentTypeMaster");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentDetail", b =>
                {
                    b.HasOne("AccountBook.Models.CategoryMaster", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryMasterId");

                    b.HasOne("AccountBook.Models.PaymentHeader", "PaymentHeader")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("PaymentHeaderId");

                    b.HasOne("AccountBook.Models.PaymentTypeMaster", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeMasterId");

                    b.HasOne("AccountBook.Models.TaxMaster", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeTaxMasterId");

                    b.Navigation("Category");

                    b.Navigation("PaymentHeader");

                    b.Navigation("PaymentType");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentHeader", b =>
                {
                    b.HasOne("AccountBook.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentHeader", b =>
                {
                    b.Navigation("AttachFile");

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("AccountBook.Models.PaymentTypeMaster", b =>
                {
                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
